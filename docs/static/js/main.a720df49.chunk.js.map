{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setStates","useEffect","then","useFetchGifs","GifExpertApp","categories","item","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,mCACI,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAKV,SACA,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAhBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAiBnBG,YAAY,qB,+BCvBXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GACzB,MAA2Bf,mBAAS,CAChCsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAd,GACFY,EAAU,CACNf,KAAMG,EACNU,SAAS,SAInB,CAACpB,IAEIqB,EDdqBI,CAAazB,GAA7Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QACnB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEXhBe,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI2C,EAAWlB,KAAI,SAAAmB,GAAI,OACf,cAAC,EAAD,CAEA5B,SAAU4B,GADLA,YCbzBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a720df49.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setcategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n        setcategories(cat=>[inputValue,...cat]);\n        setInputValue('');\n        }\n    }\n    return (\n        <>\n            <form onSubmit={handleSubmit}>   \n            <input \n            type=\"text\" \n            value={inputValue}\n            onChange={handleInputChange}\n\n            placeholder=\"Search Gifs\"\n            />\n            </form>\n        </>\n    )\n}\nAddCategory.propTypes = {\n    setcategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=X5ZwlrlVJV5IIf2IXiQ15p1W0Jnwb4jn`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    //return data;\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    }\n    )\n    return gifs;\n    \n}\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images,loading}=useFetchGifs(category);\n    return (\n        <>\n        <h3 className=\"animate__animated animate__bounce\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n        \n        <div className=\"card-grid\">\n                {\n                images.map(img => (    \n                    <GifGridItem\n                    key={img.id}\n                    {...img}    \n                    />\n                ))\n                }\n\n            \n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setStates] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n        .then(img=>{\n            setStates({\n                data: img,\n                loading: false\n            });\n        })\n        \n    },[category])\n\n    return state;\n} ","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n  \n    const [categories, setcategories] = useState(['One Punch']);\n   \n    return (\n        <>\n            <h2>Get a Gifs</h2>\n            <AddCategory setcategories={setcategories} />\n            <hr/>\n            <ol>\n            {\n                categories.map(item => (\n                    <GifGrid \n                    key={item}\n                    category={item}\n                    ></GifGrid>\n                ))\n            }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}